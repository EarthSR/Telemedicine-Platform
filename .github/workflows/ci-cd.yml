name: CI/CD (Self-Hosted -> Docker Compose)

on:
  push:
    branches: [ "main" ]

jobs:
  pipeline:
    environment: ci-cd-WebApp
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
    env:
      DOCKERHUB_USERNAME_ENV: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN_ENV: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: 1) Checkout
        uses: actions/checkout@v4

      - name: 2) Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 2.1) API tests
        run: |
          npm ci || true
          npm test --if-present

      - name: 2.2) Web build check
        working-directory: telemed-web
        run: |
          npm ci || true
          npm run build --if-present

      - name: 3) Docker Hub login (optional)
        if: ${{ env.DOCKERHUB_USERNAME_ENV != '' && env.DOCKERHUB_TOKEN_ENV != '' }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME_ENV }}
          password: ${{ env.DOCKERHUB_TOKEN_ENV }}

      - name: 4) Write .env from Secrets (normalize)
        run: |
          set -e
          printf "%s" "${{ secrets.ENV_FILE }}" > .env
          # ลบช่องว่างรอบ '=' และตัด CRLF กันพิมพ์ผิด
          sed -i -E 's/^[[:space:]]+//; s/[[:space:]]*=[[:space:]]*/=/' .env || true
          sed -i 's/\r$//' .env || true
          # ถ้าไม่มี PORT ให้ตั้ง default
          grep -q '^PORT=' .env || echo 'PORT=4005' >> .env
          awk -F= '/^[A-Za-z0-9_]+=/ {print "ENV KEY:", $1}' .env

      - name: 5) docker compose build & up (wait)
        run: |
          set -e
          docker compose --env-file .env build --pull
          docker compose --env-file .env up -d --remove-orphans --wait --wait-timeout 180
          docker compose ps

      - name: 6.1) Healthcheck API (/api/health)
        run: |
          set -e
          for i in {1..10}; do
            code=$(curl --noproxy '*' -s -o /dev/null -w "%{http_code}" http://127.0.0.1/api/health || true)
            echo "API HTTP $code (try $i/10)"
            [ "$code" = "200" ] && exit 0
            sleep 3
          done
          echo "API unhealthy"; exit 1

      - name: 6.2) Healthcheck Web (/)
        run: |
          set -e
          code=$(curl -sI -o /dev/null -w "%{http_code}" http://127.0.0.1/ || true)
          echo "WEB HTTP $code"
          case "$code" in
            200|204|304) echo "WEB ok" ;;
            *) echo "WEB unhealthy"; exit 1 ;;
          esac
